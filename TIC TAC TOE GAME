def display_board(board):
  """
  Prints the current state of the Tic-Tac-Toe board.
  """
  for row in board:
    print("|", end="")
    for cell in row:
      print(f" {cell} |", end="")
    print()

def is_valid_move(board, row, col):
  """
  Checks if a move is valid (empty cell) on the board.
  """
  return board[row][col] == " "

def make_move(board, player, row, col):
  """
  Places the player's mark on the board at the specified row and column.
  """
  board[row][col] = player

def has_won(board, player):
  """
  Checks if a player has won horizontally, vertically, or diagonally.
  """
  # Check rows
  for row in board:
    if all(cell == player for cell in row):
      return True

  # Check columns
  for col in range(len(board[0])):
    column = [row[col] for row in board]
    if all(cell == player for cell in column):
      return True

  # Check diagonals
  diagonals = [[board[i][i] for i in range(len(board))], [board[i][len(board)-i-1] for i in range(len(board))]]
  for diagonal in diagonals:
    if all(cell == player for cell in diagonal):
      return True

  return False

def is_board_full(board):
  """
  Checks if all cells on the board are filled.
  """
  return all(cell != " " for row in board for cell in row)

def play_tic_tac_toe():
  """
  Runs a single game of Tic-Tac-Toe.
  """
  board = [[" " for _ in range(3)] for _ in range(3)]  # Initialize empty board
  current_player = "X"  # Start with player X

  while True:
    display_board(board)

    # Get user input for move
    while True:
      try:
        row = int(input(f"Player {current_player}, enter row (1-3): ")) - 1
        col = int(input(f"Player {current_player}, enter column (1-3): ")) - 1
        if not (0 <= row < 3 and 0 <= col < 3):
          raise ValueError
        if not is_valid_move(board, row, col):
          print("Invalid move. Cell already occupied.")
        else:
          break
      except ValueError:
        print("Invalid input. Please enter numbers between 1 and 3.")

    # Make the move and check for winner
    make_move(board, current_player, row, col)
    if has_won(board, current_player):
      display_board(board)
      print(f"Player {current_player} wins!")
      break
    elif is_board_full(board):
      display_board(board)
      print("It's a tie!")
      break

    # Switch player
    current_player = "O" if current_player == "X" else "X"

if __name__ == "__main__":
  play_tic_tac_toe()
