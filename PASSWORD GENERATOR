import random
import string

def generate_password(length, include_uppercase=True, include_lowercase=True,
                       include_symbols=True, include_digits=True):
  """
  Generates a random password based on specified criteria.

  Args:
      length: The desired length of the password.
      include_uppercase: Boolean flag to include uppercase letters (default: True).
      include_lowercase: Boolean flag to include lowercase letters (default: True).
      include_symbols: Boolean flag to include symbols (default: True).
      include_digits: Boolean flag to include digits (default: True).

  Returns:
      A randomly generated password that meets the specified criteria.
  """

  # Define character sets based on user options
  characters = ""
  if include_uppercase:
    characters += string.ascii_uppercase
  if include_lowercase:
    characters += string.ascii_lowercase
  if include_symbols:
    characters += string.punctuation
  if include_digits:
    characters += string.digits

  # Ensure at least one character from each included category if chosen
  min_num_uppercase = 1 if include_uppercase else 0
  min_num_lowercase = 1 if include_lowercase else 0
  min_num_symbols = 1 if include_symbols else 0
  min_num_digits = 1 if include_digits else 0
  min_categories = min_num_uppercase + min_num_lowercase + min_num_symbols + min_num_digits
  if min_categories > len(characters):
    raise ValueError("Selected criteria require more character types than available. Please reduce requirements.")

  # Randomly select characters to meet minimum requirements
  password = []
  for _ in range(min_num_uppercase):
    password.append(random.choice(string.ascii_uppercase))
  for _ in range(min_num_lowercase):
    password.append(random.choice(string.ascii_lowercase))
  for _ in range(min_num_symbols):
    password.append(random.choice(string.punctuation))
  for _ in range(min_num_digits):
    password.append(random.choice(string.digits))

  # Fill remaining characters with any allowed type
  password.extend(random.choices(characters, k=length - len(password)))

  # Shuffle the password characters for better randomness
  random.shuffle(password)

  # Return the generated password as a string
  return ''.join(password)

def main():
  """
  Prompts the user for password length and criteria, then generates a password.
  """

  while True:
    try:
      length = int(input("Enter desired password length (minimum 8 characters): "))
      if length < 8:
        raise ValueError

      include_uppercase = input("Include uppercase letters? (y/n): ").lower() == 'y'
      include_lowercase = input("Include lowercase letters? (y/n): ").lower() == 'y'
      include_symbols = input("Include symbols? (y/n): ").lower() == 'y'
      include_digits = input("Include digits? (y/n): ").lower() == 'y'

      password = generate_password(length, include_uppercase, include_lowercase, include_symbols, include_digits)
      print("Your generated password:", password)
      break
    except ValueError:
      print("Invalid input. Please enter a number for length (minimum 8) and use 'y' or 'n' for options.")

if __name__ == "__main__":
  main()
